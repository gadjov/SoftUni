Exercises: Data Definition and Data Types
This document defines the exercise assignments for the "Databases Basics - MSSQL" course @ Software University. 
Problem 1.	Create Database
You now know how to create database using the GUI of the SSMS. Now it’s time to create it using SQL queries. In that task (and the several following it) you will be required to create the database from the previous exercise using only SQL queries. Firstly, just create new database named Minions.
Problem 2.	Create Tables
In the newly created database Minions add table Minions (Id, Name, Age). Then add new table Towns (Id, Name). Set Id columns of both tables to be primary key as constraint.
Problem 3.	Alter Minions Table
Change the structure of the Minions table to have new column TownId that would be of the same type as the Id column of Towns table. Add new constraint that makes TownId foreign key and references to Id column of Towns table.
Problem 4.	Insert Records in Both Tables
Populate both tables with sample records given in the table below.
Minions		Towns
Id	Name	Age	TownId		Id	Name
1	Kevin	22	1		1	Sofia
2	Bob	15	3		2	Plovdiv
3	Steward	NULL	2		3	Varna
Use only SQL queries. Submit your INSERT statements as Run skeleton, run queries & check DB.
INSERT INTO Towns
VALUES 
(1, 'Sofia'),
(2, 'Plovdiv'),
(3, 'Varna')

INSERT INTO Minions
VALUES 
(1, 'Kevin', 22, 1),
(2, 'Bob', 15, 3),
(3, 'Steward', NULL, 2)
Problem 5.	Truncate Table Minions
Delete all the data from the Minions table using SQL query.
TRUNCATE TABLE Minions
Problem 6.	Drop All Tables
Delete all tables from the Minions database using SQL query.
DROP TABLE Minions
DROP TABLE Towns
Problem 7.	Create Table People
Using SQL query create table Users with columns:
•	Id – unique number for every person there will be no more than 231-1 people. (Auto incremented)
•	Name – full name of the person will be no more than 200 Unicode characters. (Not null)
•	Picture – image with size up to 2 MB. (Allow nulls)
•	Height –  In meters. Real number precise up to 2 digits after floating point. (Allow nulls)
•	Weight –  In kilograms. Real number precise up to 2 digits after floating point. (Allow nulls)
•	Gender – Possible states are m or f. (Not null)
•	Birthdate – (Not null)
•	Biography – detailed biography of the person it can contain max allowed Unicode characters. (Allow nulls)
Make Id primary key. Populate the table with 5 records. Submit your CREATE and INSERT statements as Run queries & check DB.

CREATE TABLE People
(
	Id int IDENTITY,
	Name nvarchar(200) NOT NULL,
	Picture image,
	Height decimal(10,2),
	Weight decimal(10,2),
	Gender character NOT NULL,
	Birthdate date NOT NULL,
	Biography nvarchar(max)
)
ALTER TABLE People
ADD CONSTRAINT PK_People_Id
PRIMARY KEY (Id)

INSERT INTO People(Name,Picture,Height,Weight,Gender,Birthdate,Biography)
VALUES
('Vladimir', NULL, 180, 75, 'M', '1990-01-23', 'spam spam spam'),
('Vladimir', NULL, 120, 75, 'M', '1990-01-23', 'spam spam spam'),
('Vladimir', NULL, 180, 75, 'M', '1990-01-23', 'spam spam spam'),
('Vladimir', NULL, 180, 75, 'M', '1990-01-23', 'spam spam spam'),
('Vladimir', NULL, 180, 75, 'M', '1990-01-23', 'spam spam spam')
Problem 8.	Create Table Users
Using SQL query create table Users with columns:
•	Id – unique number for every user. There will be no more than 263-1 users. (Auto incremented)
•	Username – unique identifier of the user will be no more than 30 characters (non Unicode). (Required)
•	Password – password will be no longer than 26 characters (non Unicode). (Required)
•	ProfilePicture – image with size up to 900 KB. 
•	LastLoginTime
•	IsDeleted – shows if the user deleted his/her profile. Possible states are true or false.
Make Id primary key. Populate the table with 5 records. Submit your CREATE and INSERT statements as Run queries & check DB.

CREATE TABLE Users
(
	Id int IDENTITY,
	Username varchar(30) NOT NULL UNIQUE,
	Password varchar(30) NOT NULL,
	ProfilePicture image,
	LastLogin date,
	IsDeleted varchar(10) NOT NULL 
)

ALTER TABLE Users
ADD CONSTRAINT PK_Users_Id
PRIMARY KEY (Id)

ALTER TABLE Users
ADD CONSTRAINT DF_Users_IsDeleted
DEFAULT 'false'
FOR IsDeleted

ALTER TABLE Users
ADD CONSTRAINT True_Or_False
CHECK (IsDeleted = 'true' OR IsDeleted = 'false')

INSERT INTO Users(Username,Password,ProfilePicture,LastLogin,IsDeleted)
VALUES
('gadjov', '1234', NULL, '1999-12-19', 'true'),
('efs', '1234', NULL, '1999-12-19', 'false'),
('gadjgdov', '1234', NULL, '1999-12-19', 'false'),
('fesf', '1234', NULL, '1999-12-19', 'false'),
('grdvf', '1234', NULL, '1999-12-19', 'false')


Problem 9.	Change Primary Key
Using SQL queries modify table Users from the previous task. First remove current primary key then create new primary key that would be the combination of fields Id and Username.
ALTER TABLE Users
DROP CONSTRAINT [PK_Users_Id]

ALTER TABLE Users
ADD CONSTRAINT PK_Users_Id_Username
PRIMARY KEY (Id, Username)
Problem 10.	Add Check Constraint
Using SQL queries modify table Users. Add check constraint to ensure that the values in the Password field are at least 5 symbols long. 
ALTER TABLE Users
ADD CONSTRAINT Password_Lenght
CHECK (lena(Password) >= 5)
Problem 11.	Set Default Value of a Field
Using SQL queries modify table Users. Make the default value of LastLoginTime field to be the current time.
ALTER TABLE Users
ADD CONSTRAINT DF_Users_LastLogin
DEFAULT GETDATE()
FOR LastLogind
Problem 12.	Set Unique Field
Using SQL queries modify table Users. Remove Username field from the primary key so only the field Id would be primary key. Now add unique constraint to the Username field to ensure that the values there are at least 3 symbols long.
ALTER TABLE Users
DROP CONSTRAINT PK_Users_Id_Username

ALTER TABLE Users
ADD CONSTRAINT PK_Users_Id
PRIMARY KEY (Id)

ALTER TABLE Users
ADD CONSTRAINT uq_Users_Username
UNIQUE (Username)

ALTER TABLE Users
ADD CONSTRAINT at_least_3_symbols
CHECK (len(Username) >= 3)
Problem 13.	Movies Database
Using SQL queries create Movies database with the following entities:
•	Directors (Id, DirectorName, Notes)
•	Genres (Id, GenreName, Notes)
•	Categories (Id, CategoryName, Notes)
•	Movies (Id, Title, DirectorId, CopyrightYear, Length, GenreId, CategoryId, Rating, Notes)
Set most appropriate data types for each column. Set primary key to each table. Populate each table with 5 records. Make sure the columns that are present in 2 tables would be of the same data type. Consider which fields are always required and which are optional. Submit your CREATE TABLE and INSERT statements as Run queries & check DB.

CREATE DATABASE Movies

CREATE TABLE Directors
(
	Id int IDENTITY PRIMARY KEY NOT NULL,
	DirectorsName nvarchar(50) NOT NULL,
	Notes nvarchar(200)
)

CREATE TABLE Genres
(
	Id int IDENTITY PRIMARY KEY NOT NULL,
	GenreName nvarchar(50) NOT NULL,
	Notes nvarchar(200)
)

CREATE TABLE Categories
(
	Id int IDENTITY PRIMARY KEY NOT NULL,
	CategoryName nvarchar(50) NOT NULL,
	Notes nvarchar(200)
)

CREATE TABLE Movies
(
	Id int IDENTITY PRIMARY KEY NOT NULL,
	Title nvarchar(50) NOT NULL UNIQUE,
	DirectorId int NOT NULL,
	CopyrightYear int NOT NULL,
	Length int NOT NULL,
	GenreId int NOT NULL,
	Rating decimal(10,2) NOT NULL,
	Notes nvarchar(200)
)

INSERT INTO Categories(CategoryName,Notes)
VALUES
('Comedy', 'test dwadada'),
('Action', 'test dwadada'),
('Drama', 'test dwadada'),
('Horror', 'test dwadada'),
('XXL', 'test dwadada')

INSERT INTO Directors(DirectorsName,Notes)
VALUES
('Vladimir Gadjov', 'test'),
('dwada dwa', 'test'),
('wdawda', 'test'),
('kfdk', 'test'),
('iefieo', 'test')

INSERT INTO Genres(GenreName,Notes)
VALUES
('bg', 'wda'),
('us', 'wda'),
('en', 'wda'),
('ru', 'wda'),
('ch', 'wda')

INSERT INTO Movies(Title,DirectorId,CopyrightYear,Length,GenreId,Rating,Notes)
VALUES
('Zoo','1','2006', '128', '3', '8', 'dwa'),
('dwa','1','2006', '128', '3', '8', 'dwa'),
('ewe','1','2006', '128', '3', '8', 'dwa'),
('rere','1','2006', '128', '3', '8', 'dwa'),
('csccz','1','2006', '128', '3', '8', 'dwa')
Problem 14.	Car Rental Database
Using SQL queries create CarRental database with the following entities:
•	Categories (Id, Category, DailyRate, WeeklyRate, MonthlyRate, WeekendRate)
•	Cars (Id, PlateNumber, Make, Model, CarYear, CategoryId, Doors, Picture, Condition, Available)
•	Employees (Id, FirstName, LastName, Title, Notes)
•	Customers (Id, DriverLicenceNumber, FullName, Address, City, ZIPCode, Notes)
•	RentalOrders (Id, EmployeeId, CustomerId, CarId, CarCondition, TankLevel, KilometrageStart, KilometrageEnd, TotalKilometrage, StartDate, EndDate, TotalDays, RateApplied, TaxRate, OrderStatus, Notes)
Set most appropriate data types for each column. Set primary key to each table. Populate each table with 3 records. Make sure the columns that are present in 2 tables would be of the same data type. Consider which fields are always required and which are optional. Submit your CREATE TABLE and INSERT statements as Run queries & check DB.

CREATE DATABASE CarRental

CREATE TABLE Categories
(
	Id int IDENTITY PRIMARY KEY NOT NULL,
	Category nvarchar(50) NOT NULL,
	DailyRate decimal(10,2),
	WeeklyRate decimal(10,2),
	MonthlyRate decimal(10,2),
	WeekendRate decimal(10,2)
)

CREATE TABLE Cars
(
	Id int IDENTITY PRIMARY KEY NOT NULL,
	PlateNumber nvarchar(8) NOT NULL,
	Make nvarchar(20) NOT NULL,
	Model nvarchar(20) NOT NULL,
	CarYear int NOT NULL,
	CategoryId int NOT NULL,
	Doors int,
	Picture image,
	Condition nvarchar(50) NOT NULL,
	Available nvarchar(5) NOT NULL
)

CREATE TABLE Employees
(
	Id int IDENTITY PRIMARY KEY NOT NULL,
	FirstName nvarchar(20) NOT NULL,
	LastName nvarchar(20) NOT NULL,
	Title nvarchar(20) NOT NULL,
	Notes nvarchar(50) NOT NULL
)

CREATE TABLE Customers
(
	Id int IDENTITY PRIMARY KEY NOT NULL,
	DriverLicenceNumber int NOT NULL,
	FullName nvarchar(30) NOT NULL,
	Adress nvarchar(30) NOT NULL,
	City nvarchar(20) NOT NULL,
	ZIPCode int,
	Notes nvarchar(50)
)

CREATE TABLE RentalOrders
(
	Id int IDENTITY PRIMARY KEY NOT NULL,
	EmployeeId int NOT NULL,
	CustomerId int NOT NULL,
	CarId int NOT NULL,
	CarCondition nvarchar(50) NOT NULL,
	TankLevel decimal(10,2) NOT NULL,
	KilometrageStart decimal(10,2) NOT NULL,
	KilometrageEnd decimal(10,2) NOT NULL,
	TotalKilometrage decimal(10,2) NOT NULL,
	StartDate date NOT NULL,
	EndDate date NOT NULL,
	TotalDays int NOT NULL,
	RateApplied decimal(10,2),
	TaxRate decimal(10,2),
	OrderStatus nvarchar(5),
	Notes nvarchar(50)
)

INSERT INTO Cars(PlateNumber,Make,Model,CarYear,CategoryId,Doors,Picture,Condition,Available)
VALUES
('SO1349HT','SEAT','Leon',2004,1,4,NULL,'Exelent','Yes'),
('SO1349HT','SEAT','Leon',2004,1,4,NULL,'Exelent','Yes'),
('SO1349HT','SEAT','Leon',2004,1,4,NULL,'Exelent','Yes')

INSERT INTO Categories(Category,DailyRate,WeeklyRate,MonthlyRate,WeekendRate)
VALUES 
('dwa',2.2,1.2,3.4,23),
('dwa',2.2,1.2,3.4,23),
('dwa',2.2,1.2,3.4,23)

INSERT INTO Customers(DriverLicenceNumber,FullName,Adress,City,ZIPCode,Notes)
VALUES
(23456,'Ivan Georgiev','Sofia Kitka 6','Sofia',222,'dwadada'),
(23456,'Ivan Georgiev','Sofia Kitka 6','Sofia',222,'dwadada'),
(23456,'Ivan Georgiev','Sofia Kitka 6','Sofia',222,'dwadada')

INSERT INTO Employees(FirstName,LastName,Title,Notes)
VALUES
('Georgi','Dobrev','Sir','dwada'),
('Georgi','Dobrev','Sir','dwada'),
('Georgi','Dobrev','Sir','dwada')

INSERT INTO RentalOrders(EmployeeId,CustomerId,CarId,CarCondition,TankLevel,KilometrageStart,KilometrageEnd,TotalKilometrage,StartDate,EndDate,TotalDays,RateApplied,TaxRate,OrderStatus,Notes)
VALUES
(2,3,1,'exelent',45.50,5400,5600,2000,'2012-10-24','2012-12-24',65,34.41,2.4,'yes','dwada'),
(2,3,1,'exelent',45.50,5400,5600,2000,'2012-10-24','2012-12-24',65,34.41,2.4,'yes','dwada'),
(2,3,1,'exelent',45.50,5400,5600,2000,'2012-10-24','2012-12-24',65,34.41,2.4,'yes','dwada')
Problem 15.	Hotel Database
Using SQL queries create Hotel database with the following entities:
•	Employees (Id, FirstName, LastName, Title, Notes)
•	Customers (AccountNumber, FirstName, LastName, PhoneNumber, EmergencyName, EmergencyNumber, Notes)
•	RoomStatus (RoomStatus, Notes)
•	RoomTypes (RoomType, Notes)
•	BedTypes (BedType, Notes)
•	Rooms (RoomNumber, RoomType, BedType, Rate, RoomStatus, Notes)
•	Payments (Id, EmployeeId, PaymentDate, AccountNumber, FirstDateOccupied, LastDateOccupied, TotalDays, AmountCharged, TaxRate, TaxAmount, PaymentTotal, Notes)
•	Occupancies (Id, EmployeeId, DateOccupied, AccountNumber, RoomNumber, RateApplied, PhoneCharge, Notes)
Set most appropriate data types for each column. Set primary key to each table. Populate each table with 3 records. Make sure the columns that are present in 2 tables would be of the same data type. Consider which fields are always required and which are optional. Submit your CREATE TABLE and INSERT statements as Run queries & check DB.

CREATE DATABASE Hotel

USE Hotel

CREATE TABLE Employees
(
	Id int PRIMARY KEY NOT NULL,
	FirstName nvarchar(20) NOT NULL,
	LastName nvarchar(20) NOT NULL,
	Title nvarchar(20),
	Notes nvarchar(50)
)

CREATE TABLE Customers
(
	AccountNumber int PRIMARY KEY NOT NULL,
	FirstName nvarchar(20) NOT NULL,
	LastName nvarchar(20) NOT NULL,
	PhoneNumber int,
	EmergencyName nvarchar(10),
	EmergencyNumber int,
	Notes nvarchar(50)
)

CREATE TABLE RoomStatus
(
	RoomStatus nvarchar(5) PRIMARY KEY NOT NULL,
	Notes nvarchar(50)
)

CREATE TABLE RoomTypes
(
	RoomType nvarchar(10) PRIMARY KEY NOT NULL,
	Notes nvarchar(50)
)

CREATE TABLE BedTypes
(
	BedType nvarchar(10) PRIMARY KEY NOT NULL,
	Notes nvarchar(50)
)

CREATE TABLE Rooms
(
	RoomNumber int PRIMARY KEY NOT NULL,
	RoomType nvarchar(10) NOT NULL,
	BedType nvarchar(10) NOT NULL,
	Rate decimal(2,2),
	RoomStatus nvarchar(5) NOT NULL,
	Notes nvarchar(50)
)

CREATE TABLE Payments
(
	Id int PRIMARY KEY NOT NULL,
	EmployeeId int NOT NULL,
	PaymentDate date,
	AccountNumber int NOT NULL,
	FirstDateOccupied date NOT NULL,
	LastDateOccupied date NOT NULL,
	TotalDays int,
	AmountCharged decimal(6,2),
	TaxRate decimal(6,2),
	TaxAmount int,
	PaymentTotal decimal(6,2) NOT NULL,
	Notes nvarchar(50)
)

CREATE TABLE Occupancies
(
	Id int PRIMARY KEY NOT NULL,
	EmployeeId int NOT NULL,
	DateOccupied date NOT NULL,
	AccountNumber int NOT NULL,
	RoomNumber int NOT NULL,
	RateApplied decimal(10,2),
	PhoneCharge int,
	Notes nvarchar(50)
)

INSERT INTO BedTypes
VALUES
('Single',NULL),
('Double',NULL),
('Kids',NULL)

INSERT INTO Customers
VALUES
('2312','Vladimir','Gadjov',0882254280,NULL,NULL,NULL),
('2322','Vladimir','Gadjov',0882254280,NULL,NULL,NULL),
('2112','Vladimir','Gadjov',0882254280,NULL,NULL,NULL)

INSERT INTO Employees
VALUES
(1,'Vladimir','Gadjov',NULL,NULL),
(2,'Vladimir','Gadjov',NULL,NULL),
(3,'Vladimir','Gadjov',NULL,NULL)

INSERT INTO Occupancies
VALUES
(1,2,'2010-12-01',2312,101,NULL,2,NULL),
(2,2,'2010-12-01',2312,101,NULL,2,NULL),
(3,2,'2010-12-01',2312,101,NULL,2,NULL)

INSERT INTO Payments
VALUES
(1,2,NULL,2312,'2016-02-04','2016-02-07',5,6,NULL,NULL,200,NULL),
(2,2,NULL,2312,'2016-02-04','2016-02-07',5,6,NULL,NULL,200,NULL),
(3,2,NULL,2312,'2016-02-04','2016-02-07',5,6,NULL,NULL,200,NULL)

INSERT INTO Rooms
VALUES
(101,'Lux','Double',NULL,'free',NULL),
(102,'Lux','Double',NULL,'free',NULL),
(103,'Lux','Double',NULL,'free',NULL)

INSERT INTO RoomStatus VALUES
('free',NULL),
('out',NULL),
('reser',NULL)

INSERT INTO RoomTypes VALUES
('Lux',NULL),
('Oridinary',NULL),
('President',NULL)
Problem 16.	Create SoftUni Database
Now create bigger database called SoftUni. You will use same database in the future tasks. It should hold information about
•	Towns (Id, Name)
•	Addresses (Id, AddressText, TownId)
•	Departments (Id, Name)
•	Employees (Id, FirstName, MiddleName, LastName, JobTitle, DepartmentId, HireDate, Salary, AddressId)
Id columns are auto incremented starting from 1 and increased by 1 (1, 2, 3, 4…). Make sure you use appropriate data types for each column. Add primary and foreign keys as constraints for each table. Use only SQL queries. Consider which fields are always required and which are optional.
CREATE DATABASE SoftUni

USE SoftUni

CREATE TABLE Towns
(
	Id int IDENTITY PRIMARY KEY NOT NULL,
	Name nvarchar(20) NOT NULL
)

CREATE TABLE Addresses
(
	Id int IDENTITY PRIMARY KEY NOT NULL,
	AdressText nvarchar(50) NOT NULL,
	TownId int NOT NULL
)

CREATE TABLE Departments
(
	Id int IDENTITY PRIMARY KEY NOT NULL,
	Name nvarchar(20) NOT NULL
)

CREATE TABLE Employees
(
	Id int IDENTITY PRIMARY KEY NOT NULL,
	FirstName nvarchar(15) NOT NULL,
	MiddleName nvarchar(15),
	LastName nvarchar(15) NOT NULL,
	JobTitle nvarchar(15),
	DepartmentId int NOT NULL,
	HireDate date,
	Salary decimal(6,2) NOT NULL,
	AddressId int NOT NULL
)

ALTER TABLE Addresses
ADD CONSTRAINT FK_Adresses_TownId_Id
FOREIGN KEY (TownId)
REFERENCES Towns(Id)

ALTER TABLE Employees
ADD CONSTRAINT FK_Employees_AddressId_Id
FOREIGN KEY (AddressId)
REFERENCES Addresses(Id)
Problem 17.	Backup Database
Backup the database SoftUni from the previous tasks into a file named “softuni-backup.bak”. Delete your database from SQL Server Management Studio. Then restore the database fr
om the created backup.
Problem 18.	Basic Insert
Use the SoftUni database and insert some data using SQL queries.
•	Towns: Sofia, Plovdiv, Varna, Burgas
•	Departments: Engineering, Sales, Marketing, Software Development, Quality Assurance
•	Employees:     

INSERT INTO Towns(Name) VALUES
('Sofia'),
('Plovdiv'),
('Varna'),
('Burgas')

INSERT INTO Departments(Name) VALUES
('Engineering'),
('Sales'),
('Marketing'),
('Software Devolepment'),
('Quality Assurance')

INSERT INTO Employees(FirstName,MiddleName,LastName,JobTitle,DepartmentId,HireDate,Salary) VALUES
('Ivan','Ivanov','Ivanov','.Net Developer',4,'2013-02-01',3500),
('Petar','Petrov','Petrov','Senior Engineer',1,'2004-03-02',4000),
('Maria','Petrova','Ivanova','Intern',5,'2016-08-28',525.25),
('Georgi','Terziev','Ivanov','CEO',2,'2007-12-09',3000),
('Peter','Pan','Pan','Intern',3,'2016-08-28',599.88)

Name	Job Title	Department	Hire Date	Salary
Ivan Ivanov Ivanov	.NET Developer	Software Development	01/02/2013	3500.00
Petar Petrov Petrov	Senior Engineer	Engineering	02/03/2004	4000.00
Maria Petrova Ivanova	Intern	Quality Assurance	28/08/2016	525.25
Georgi Teziev Ivanov	CEO	Sales	09/12/2007	3000.00
Peter Pan Pan	Intern	Marketing	28/08/2016	599.88
Problem 19.	Basic Select All Fields
Use the SoftUni database and first select all records from the Towns, then from Departments and finally from Employees table. Use SQL queries and submit them to Judge at once. Submit your query statements as Prepare DB & Run queries.
SELECT * FROM Towns

SELECT * FROM Departments

SELECT * FROM Employees
Problem 20.	Basic Select All Fields and Order Them
Modify queries from previous problem by sorting:
•	Towns - alphabetically by name
•	Departments - alphabetically by name
•	Employees - descending by salary
Submit your query statements as Prepare DB & Run queries.
SELECT * FROM Towns
ORDER BY Name ASC

SELECT * FROM Departments
ORDER BY Name ASC

SELECT * FROM Employees
ORDER BY Salary DESC
Problem 21.	Basic Select Some Fields
Modify queries from previous problem to show only some of the columns. For table:
•	Towns – Name
•	Departments – Name
•	Employees – FirstName, LastName, JobTitle, Salary
Keep the ordering from the previous problem. Submit your query statements as Prepare DB & Run queries.
SELECT [Name] FROM Towns
ORDER BY Name ASC

SELECT [Name] FROM Departments
ORDER BY Name ASC

SELECT [FirstName],[LastName],[JobTitle],[Salary] FROM Employees
ORDER BY Salary DESC
Problem 22.	Increase Employees Salary
Use SoftUni database and increase the salary of all employees by 10%. Then show only Salary column for all in the Employees table. Submit your query statements as Prepare DB & Run queries.
UPDATE Employees
SET Salary= Salary * 1.10

SELECT [Salary] FROM Employees

Problem 23.	Decrease Tax Rate
Use Hotel database and decrease tax rate by 3% to all payments. Then select only TaxRate column from the Payments table. Submit your query statements as Prepare DB & Run queries.
UPDATE Payments
SET TaxRate = TaxRate / 1.03

SELECT [TaxRate] FROM Payments
Problem 24.	Delete All Records
Use Hotel database and delete all records from the Occupancies table. Use SQL query. Submit your query statements as Run skeleton, run queries & check DB.
TRUNCATE TABLE Occupancies

